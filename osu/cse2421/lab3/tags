!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Awk	f,function	/functions/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Awk	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	1.1	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/c/Users/faye/Documents/GitHub/OSU/CSE-2421/lab3/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20240915.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
%.o	makefile	/^%.o:%.c *.h$/;"	t
ActionFunction	libll.h	/^typedef void (* ActionFunction)( void *data);$/;"	t	typeref:typename:void (*)(void * data)
BLOCK_H	sim.c	/^#define BLOCK_H /;"	d	file:
BLOCK_L	sim.c	/^#define BLOCK_L /;"	d	file:
BOTTOM	sim.c	/^#define BOTTOM /;"	d	file:
Ball	proto1.c	/^} Ball;$/;"	t	typeref:struct:__anon2b4ce77b0208	file:
Ball	structs.h	/^} Ball;$/;"	t	typeref:struct:__anonb37368f30108
Block	structs.h	/^} Block;$/;"	t	typeref:struct:__anonb37368f30208
CFLAGS	makefile	/^CFLAGS= -std=c99 -pedantic -Wformat -Wreturn-type $/;"	m
ComparisonFunction	libll.h	/^typedef bool (* ComparisonFunction)(void *data1, void *data2);$/;"	t	typeref:typename:bool (*)(void * data1,void * data2)
CriteriaFunction	libll.h	/^typedef bool (* CriteriaFunction)(void *data, void *helper);$/;"	t	typeref:typename:bool (*)(void * data,void * helper)
DEBUG	debug.h	/^#define DEBUG /;"	d
DELTA_T	constants.h	/^#define DELTA_T /;"	d
GRAPHICS	debug.h	/^#define GRAPHICS /;"	d
LDFLAGS	makefile	/^LDFLAGS= -L. -Wl,--copy-dt-needed-entries$/;"	m
LEFT	sim.c	/^#define LEFT /;"	d	file:
LIBS	makefile	/^LIBS= -lbko -lm$/;"	m
NumericFunction	libll.h	/^typedef double (* NumericFunction)(void *data);$/;"	t	typeref:typename:double (*)(void * data)
PADDLE_COUNT	structs.h	/^#define PADDLE_COUNT /;"	d
Paddle	structs.h	/^} Paddle;$/;"	t	typeref:struct:__anonb37368f30308
RIGHT	sim.c	/^#define RIGHT /;"	d	file:
RVAL_BAD_INIT	lab3.c	/^#define RVAL_BAD_INIT /;"	d	file:
RVAL_BAD_INPUT	lab3.c	/^#define RVAL_BAD_INPUT /;"	d	file:
SEC_INTERVAL	constants.h	/^#define SEC_INTERVAL /;"	d
SS_BALL_COUNT	subscripts.h	/^#define SS_BALL_COUNT /;"	d
SS_BALL_DATA_COUNT	subscripts.h	/^#define SS_BALL_DATA_COUNT /;"	d
SS_BALL_INPUT_COUNT	subscripts.h	/^#define SS_BALL_INPUT_COUNT /;"	d
SS_BALL_VX	subscripts.h	/^#define SS_BALL_VX /;"	d
SS_BALL_VY	subscripts.h	/^#define SS_BALL_VY /;"	d
SS_BALL_X	subscripts.h	/^#define SS_BALL_X /;"	d
SS_BALL_Y	subscripts.h	/^#define SS_BALL_Y /;"	d
SS_BLOCK_BOTTOM	subscripts.h	/^#define SS_BLOCK_BOTTOM /;"	d
SS_BLOCK_COUNT	subscripts.h	/^#define SS_BLOCK_COUNT /;"	d
SS_BLOCK_DATA_COUNT	subscripts.h	/^#define SS_BLOCK_DATA_COUNT /;"	d
SS_BLOCK_INPUT_COUNT	subscripts.h	/^#define SS_BLOCK_INPUT_COUNT /;"	d
SS_BLOCK_LEFT	subscripts.h	/^#define SS_BLOCK_LEFT /;"	d
SS_BLOCK_RIGHT	subscripts.h	/^#define SS_BLOCK_RIGHT /;"	d
SS_BLOCK_TOP	subscripts.h	/^#define SS_BLOCK_TOP /;"	d
SS_BLOCK_X	subscripts.h	/^#define SS_BLOCK_X /;"	d
SS_BLOCK_Y	subscripts.h	/^#define SS_BLOCK_Y /;"	d
SS_COLOR	subscripts.h	/^#define SS_COLOR /;"	d
SS_PADDLE_COUNT	subscripts.h	/^#define SS_PADDLE_COUNT /;"	d
SS_PADDLE_DATA_COUNT	subscripts.h	/^#define SS_PADDLE_DATA_COUNT /;"	d
SS_PADDLE_INPUT_COUNT	subscripts.h	/^#define SS_PADDLE_INPUT_COUNT /;"	d
SS_PADDLE_LEFT	subscripts.h	/^#define SS_PADDLE_LEFT /;"	d
SS_PADDLE_RIGHT	subscripts.h	/^#define SS_PADDLE_RIGHT /;"	d
SS_PADDLE_SCORE	subscripts.h	/^#define SS_PADDLE_SCORE /;"	d
SS_PADDLE_SIZE	subscripts.h	/^#define SS_PADDLE_SIZE /;"	d
SS_PADDLE_X	subscripts.h	/^#define SS_PADDLE_X /;"	d
SS_PADDLE_Y	subscripts.h	/^#define SS_PADDLE_Y /;"	d
SS_PREV_DATA_COUNT	subscripts.h	/^#define SS_PREV_DATA_COUNT /;"	d
SS_PREV_DX	subscripts.h	/^#define SS_PREV_DX /;"	d
SS_PREV_DY	subscripts.h	/^#define SS_PREV_DY /;"	d
SS_PREV_X	subscripts.h	/^#define SS_PREV_X /;"	d
SS_PREV_Y	subscripts.h	/^#define SS_PREV_Y /;"	d
SS_WALL_COUNT	subscripts.h	/^#define SS_WALL_COUNT /;"	d
SS_WALL_LEFT	subscripts.h	/^#define SS_WALL_LEFT /;"	d
SS_WALL_RIGHT	subscripts.h	/^#define SS_WALL_RIGHT /;"	d
SS_WALL_TOP	subscripts.h	/^#define SS_WALL_TOP /;"	d
Sim	proto1.c	/^} Sim;$/;"	t	typeref:struct:__anon2b4ce77b0108	file:
Sim	structs.h	/^struct Sim {$/;"	s
TEXT	debug.h	/^#define TEXT /;"	d
TOP	sim.c	/^#define TOP /;"	d	file:
VERBOSE	debug.h	/^#define VERBOSE /;"	d
__anon2b4ce77b0108	proto1.c	/^typedef struct {$/;"	s	file:
__anon2b4ce77b0208	proto1.c	/^typedef struct {$/;"	s	file:
__anonb37368f30108	structs.h	/^typedef struct {$/;"	s
__anonb37368f30208	structs.h	/^typedef struct {$/;"	s
__anonb37368f30308	structs.h	/^typedef struct {$/;"	s
all	makefile	/^all: tags headers lab3$/;"	t
bad_ball_message	output.c	/^void bad_ball_message(double ball[]) {$/;"	f	typeref:typename:void
bounce_message	output.c	/^void bounce_message(int color, char *wall, double X, double Y) {$/;"	f	typeref:typename:void
collisionBlock	collision.c	/^void collisionBlock(double ball[], double block[]) {$/;"	f	typeref:typename:void
collisionBlockEdge	collision.c	/^void collisionBlockEdge(double ballPrev[], double ball[], double block[]) {$/;"	f	typeref:typename:void
collisionBlockEdgeLeft	collision.c	/^bool collisionBlockEdgeLeft(double ballPrev[], double ball[], double block[]) {$/;"	f	typeref:typename:bool
collisionBlockEdgeRight	collision.c	/^bool collisionBlockEdgeRight(double ballPrev[], double ball[], double block[]) {$/;"	f	typeref:typename:bool
collisionBlockPrev	collision.c	/^void collisionBlockPrev(double ball[], double block[]) {$/;"	f	typeref:typename:void
collisionBlockVX	collision.c	/^void collisionBlockVX(double ball[], double block[]) {$/;"	f	typeref:typename:void
collisionBlockVertical	collision.c	/^void collisionBlockVertical(double ball[], double block[]) {$/;"	f	typeref:typename:void
collisionBounceHorizontal	collision.c	/^void collisionBounceHorizontal(double ball[]) {$/;"	f	typeref:typename:void
collisionBounceVertical	collision.c	/^void collisionBounceVertical(double ball[]) {$/;"	f	typeref:typename:void
collisionCorrectionX	collision.c	/^void collisionCorrectionX(double ball[], double boundary) {$/;"	f	typeref:typename:void
collisionCorrectionY	collision.c	/^void collisionCorrectionY(double ball[], double boundary) {$/;"	f	typeref:typename:void
collisionPaddle	collision.c	/^void collisionPaddle(double ball[], double paddle[]) {$/;"	f	typeref:typename:void
collisionWall	collision.c	/^void collisionWall(double ball[], double walls[]) {$/;"	f	typeref:typename:void
color	proto1.c	/^    int color;$/;"	m	struct:__anon2b4ce77b0208	typeref:typename:int	file:
color	structs.h	/^    int color, score;$/;"	m	struct:__anonb37368f30308	typeref:typename:int
color	structs.h	/^    int color;$/;"	m	struct:__anonb37368f30108	typeref:typename:int
color	structs.h	/^    int color;$/;"	m	struct:__anonb37368f30208	typeref:typename:int
debugBallPos	debugMessages.c	/^void debugBallPos(double ball[]) {$/;"	f	typeref:typename:void
debugBallPos	text.c	/^void debugBallPos(double ball[]) {$/;"	f	typeref:typename:void
debugBallPrev	debugMessages.c	/^void debugBallPrev(double ballPrev[]) {$/;"	f	typeref:typename:void
debugBallPrev	text.c	/^void debugBallPrev(double ballPrev[]) {$/;"	f	typeref:typename:void
debugBallVel	debugMessages.c	/^void debugBallVel(double ball[]) {$/;"	f	typeref:typename:void
debugBallVel	text.c	/^void debugBallVel(double ball[]) {$/;"	f	typeref:typename:void
debugBlockPos	debugMessages.c	/^void debugBlockPos(double block[]) {$/;"	f	typeref:typename:void
debugBlockPos	text.c	/^void debugBlockPos(double block[]) {$/;"	f	typeref:typename:void
debugCollisionBlock	debugMessages.c	/^void debugCollisionBlock(double ball[], double block[]) {$/;"	f	typeref:typename:void
debugCollisionBlock	text.c	/^void debugCollisionBlock(double ball[], double block[]) {$/;"	f	typeref:typename:void
debugCollisionBlockEdge	debugMessages.c	/^void debugCollisionBlockEdge(double yCross, double ballPrev[], double ball[], double block[]) {$/;"	f	typeref:typename:void
debugCollisionBlockEdge	text.c	/^void debugCollisionBlockEdge(double yCross, double ballPrev[], double ball[], double block[]) {$/;"	f	typeref:typename:void
debugCollisionBlockPrev	debugMessages.c	/^void debugCollisionBlockPrev(double ballPrev[], double ball[], double block[]) {$/;"	f	typeref:typename:void
debugCollisionBlockPrev	text.c	/^void debugCollisionBlockPrev(double ballPrev[], double ball[], double block[]) {$/;"	f	typeref:typename:void
debugCollisionBlockVX	debugMessages.c	/^void debugCollisionBlockVX(double ball[]) {$/;"	f	typeref:typename:void
debugCollisionBlockVX	text.c	/^void debugCollisionBlockVX(double ball[]) {$/;"	f	typeref:typename:void
debugCollisionBlockVertical	debugMessages.c	/^void debugCollisionBlockVertical(double ball[]) {$/;"	f	typeref:typename:void
debugCollisionBlockVertical	text.c	/^void debugCollisionBlockVertical(double ball[]) {$/;"	f	typeref:typename:void
debugCollisionPaddle	debugMessages.c	/^void debugCollisionPaddle(double ball[], double paddle[]) {$/;"	f	typeref:typename:void
debugCollisionPaddle	text.c	/^void debugCollisionPaddle(double ball[], double paddle[]) {$/;"	f	typeref:typename:void
debugCollisionWall	debugMessages.c	/^void debugCollisionWall(char *wall, double ball[], double walls[]) {$/;"	f	typeref:typename:void
debugCollisionWall	text.c	/^void debugCollisionWall(char *wall, double ball[], double walls[]) {$/;"	f	typeref:typename:void
debugPaddlePos	debugMessages.c	/^void debugPaddlePos(double paddle[]) {$/;"	f	typeref:typename:void
debugPaddlePos	text.c	/^void debugPaddlePos(double paddle[]) {$/;"	f	typeref:typename:void
debugRejectSide	debugMessages.c	/^char *debugRejectSide(double ball[]) {$/;"	f	typeref:typename:char *
debugRejectSide	text.c	/^char *debugRejectSide(double ball[]) {$/;"	f	typeref:typename:char *
debugWallPos	debugMessages.c	/^void debugWallPos(double walls[]) {$/;"	f	typeref:typename:void
debugWallPos	text.c	/^void debugWallPos(double walls[]) {$/;"	f	typeref:typename:void
draw_balls	graphics.c	/^static void draw_balls(double ball[]) {$/;"	f	typeref:typename:void	file:
draw_blocks	graphics.c	/^static void draw_blocks(double block[]) {$/;"	f	typeref:typename:void	file:
draw_paddles	graphics.c	/^static void draw_paddles(double paddle[]) {$/;"	f	typeref:typename:void	file:
final_output	output.c	/^void final_output(double elapsed, double ball[], double block[], double paddle[]) {$/;"	f	typeref:typename:void
freeze	graphics.c	/^void freeze(double elapsed, double ball[], double block[], double paddle[]) {$/;"	f	typeref:typename:void
getData	sim.c	/^bool getData(double ball[], double block[], double paddle[], double walls[]) {$/;"	f	typeref:typename:bool
headers	makefile	/^headers: *.c $/;"	t
incrementPos	sim.c	/^void incrementPos(double ball[]) {$/;"	f	typeref:typename:void
init	lab3.c	/^bool init() {$/;"	f	typeref:typename:bool
inputBall	input.c	/^bool inputBall(double ball[]) {$/;"	f	typeref:typename:bool
inputBallLoop	input.c	/^bool inputBallLoop(double ball[], int count) {$/;"	f	typeref:typename:bool
inputBlock	input.c	/^bool inputBlock(double block[]) {$/;"	f	typeref:typename:bool
inputBlockLoop	input.c	/^bool inputBlockLoop(double block[], int count) {$/;"	f	typeref:typename:bool
inputPaddle	input.c	/^bool inputPaddle(double paddle[]) {$/;"	f	typeref:typename:bool
inputPaddleLoop	input.c	/^bool inputPaddleLoop(double paddle[], int count) {$/;"	f	typeref:typename:bool
lab3.zip	makefile	/^lab3.zip: makefile *.c *.h README_LAB3 n2.o *.a$/;"	t
main	lab3.c	/^int main() {$/;"	f	typeref:typename:int
main	proto1.c	/^int main(){$/;"	f	typeref:typename:int
master_draw	graphics.c	/^void master_draw(double elapsed, double ball[], double block[], double paddle[], bool show_balls/;"	f	typeref:typename:void
master_output	output.c	/^void master_output(double elapsed, double ball[], double block[], double paddle[]) {$/;"	f	typeref:typename:void
printState	text.c	/^void printState(double elapsed, double ball[], double block[], double paddle[]) {$/;"	f	typeref:typename:void
print_now	output.c	/^static bool print_now(double elapsed) {$/;"	f	typeref:typename:bool	file:
proto1	makefile	/^proto1: proto1.o$/;"	t
resolveCollisions	collision.c	/^void resolveCollisions(double ball[], double block[], double paddle[], double walls[]) {$/;"	f	typeref:typename:void
run	sim.c	/^bool run() {$/;"	f	typeref:typename:bool
saveBlock	sim.c	/^void saveBlock(double block[]) {$/;"	f	typeref:typename:void
savePaddle	sim.c	/^void savePaddle(double paddle[]) {$/;"	f	typeref:typename:void
saveWalls	sim.c	/^void saveWalls(double walls[]) {$/;"	f	typeref:typename:void
scanf_message	output.c	/^void scanf_message(char *who, int got, int wanted) {$/;"	f	typeref:typename:void
score	structs.h	/^    int color, score;$/;"	m	struct:__anonb37368f30308	typeref:typename:int
sim	proto1.c	/^    Sim *sim;$/;"	m	struct:__anon2b4ce77b0208	typeref:typename:Sim *	file:
sim	structs.h	/^    Sim *sim;$/;"	m	struct:__anonb37368f30108	typeref:typename:Sim *
simLoop	sim.c	/^int simLoop(int ticks, double ball[], double block[], double paddle[], double walls[]) {$/;"	f	typeref:typename:int
tags	makefile	/^tags: *.c$/;"	t
teardown	lab3.c	/^void teardown() {$/;"	f	typeref:typename:void
test	structs.h	/^    Paddle test[PADDLE_COUNT];$/;"	m	struct:Sim	typeref:typename:Paddle[]
time	proto1.c	/^    double time;$/;"	m	struct:__anon2b4ce77b0108	typeref:typename:double	file:
time	structs.h	/^    double time;$/;"	m	struct:Sim	typeref:typename:double
vx	structs.h	/^    double x, y, vx, vy;$/;"	m	struct:__anonb37368f30108	typeref:typename:double
vy	structs.h	/^    double x, y, vx, vy;$/;"	m	struct:__anonb37368f30108	typeref:typename:double
x	proto1.c	/^    double x;$/;"	m	struct:__anon2b4ce77b0208	typeref:typename:double	file:
x	structs.h	/^    double x, y, vx, vy;$/;"	m	struct:__anonb37368f30108	typeref:typename:double
x_left	structs.h	/^    double x_left, x_right, y_top, y_bottom; $/;"	m	struct:__anonb37368f30208	typeref:typename:double
x_left	structs.h	/^    double x_left, x_right;$/;"	m	struct:__anonb37368f30308	typeref:typename:double
x_right	structs.h	/^    double x_left, x_right, y_top, y_bottom; $/;"	m	struct:__anonb37368f30208	typeref:typename:double
x_right	structs.h	/^    double x_left, x_right;$/;"	m	struct:__anonb37368f30308	typeref:typename:double
y	structs.h	/^    double x, y, vx, vy;$/;"	m	struct:__anonb37368f30108	typeref:typename:double
y_bottom	structs.h	/^    double x_left, x_right, y_top, y_bottom; $/;"	m	struct:__anonb37368f30208	typeref:typename:double
y_top	structs.h	/^    double x_left, x_right, y_top, y_bottom; $/;"	m	struct:__anonb37368f30208	typeref:typename:double
